if (is.null(II)) {
params$singularMatrix = TRUE
params$failed = TRUE
params$errorMessage = "The matrix t(X)WX is singular.  This is probably due to divergence of the coefficients."
cat("ERROR: The matrix t(X)*W*X is not invertible.\n")
cat("       This may be due to one of two possible problems.\n")
cat("       1. Poor random initilization of the security vector.\n")
cat("       2. Near multicolinearity in the data\n")
cat("SOLUTIONS: \n")
cat("       1. Rerun the data analaysis.\n")
cat("       2. If the problem persists, check the variables for\n")
cat("          duplicates for both parties and / or reduce the\n")
cat("          number of variables used. Once this is done,\n")
cat("          rerun the data analysis.\n\n")
} else {
params$II = II
params$IA = IA
a21i1 = II[(p1 + 1):(p1 + p2), 1:p1] %*% matrix(IA, p1, 1)
a11i1 = II[1:p1, 1:p1] %*% matrix(IA, p1, 1)
params$a11i1 = a11i1
writeTime = proc.time()[3]
save(a21i1, XTWX, file = file.path(params$writePath, "a21i1_xtwx.rdata"))
writeSize = sum(file.size(file.path(params$writePath, "a21i1_xtwx.rdata")))
writeTime = proc.time()[3] - writeTime
}
params = AddToLog(params, "GetIILogistic.A2", readTime, readSize, writeTime, writeSize)
return(params)
}
GetCoefLogistic.B2 = function(params, data) {
if (params$trace) cat(as.character(Sys.time()), "GetCoefLogistic.B2\n\n")
p1 = params$p1
p2 = params$p2
readTime = proc.time()[3]
load(file.path(params$readPath, "a21i1_xtwx.rdata"))   # load a21i1, XTWX
readSize = sum(file.size(file.path(params$readPath, "a21i1_xtwx.rdata")))
readTime = proc.time()[3] - readTime
IB = params$Bxty - t(data$X) %*% params$pi_
II = solve(XTWX)
params$II = II
params$IB = IB
a22i2 = II[(p1 + 1):(p1 + p2), (p1 + 1):(p1 + p2), drop = FALSE] %*% IB
a12i2 = II[1:p1, (p1 + 1):(p1 + p2), drop = FALSE] %*% IB
params$a22i2 = a22i2
params$betasBold = params$betasB
params$betasB = params$betasB + a21i1 + a22i2
deltabetaB = max( abs(params$betasB - params$betasBold) / (abs(params$betasB) + 0.1))
writeTime = proc.time()[3]
save(a12i2, deltabetaB, file = file.path(params$writePath, "a12_deltabetaB.rdata"))
writeSize = sum(file.size(file.path(params$writePath, "a12_deltabetaB.rdata")))
writeTime = proc.time()[3] - writeTime
params = AddToLog(params, "GetCoefLogistic.B2", readTime, readSize, writeTime, writeSize)
return(params)
}
GetCoefLogistic.A2 = function(params, data) {
if (params$trace) cat(as.character(Sys.time()), "GetCoefLogistic.A2\n\n")
readTime = proc.time()[3]
load(file.path(params$readPath, "a12_deltabetaB.rdata")) # load  a12i2, deltabetab
readSize = sum(file.size(file.path(params$readPath, "a12_deltabetaB.rdata")))
readTime = proc.time()[3] - readTime
params$betasAold = params$betasA
params$betasA = params$betasA + params$a11i1 + a12i2
deltabeta = max(abs(params$betasA - params$betasAold) / (abs(params$betasA) + 0.1), deltabetaB)
if (deltabeta < params$cutoff)  {
params$converged = TRUE
} else if (params$algIterationCounter >= params$maxIterations) {
params$maxIterExceeded = TRUE
}
writeTime = proc.time()[3]
save(deltabeta, file = file.path(params$writePath, "deltabeta.rdata"))
writeSize = file.size(file.path(params$writePath, "deltabeta.rdata"))
writeTime = proc.time()[3] - writeTime
params = AddToLog(params, "GetCoefLogistic.A2", readTime, readSize, writeTime, writeSize)
return(params)
}
GetConvergedStatusLogistic.B2 = function(params) {
if (params$trace) cat(as.character(Sys.time()), "GetconvergedStatusLogistic.B2\n\n")
readTime = proc.time()[3]
load(file.path(params$readPath, "deltabeta.rdata")) # load deltabeta.rdata
readSize = file.size(file.path(params$readPath, "deltabeta.rdata"))
readTime = proc.time()[3] - readTime
if (deltabeta < params$cutoff)  {
params$converged = TRUE
} else if (params$algIterationCounter >= params$maxIterations) {
params$maxIterExceeded = TRUE
}
params = AddToLog(params, "GetConvergedStatusLogistic.B2", readTime, readSize, 0, 0)
return(params)
}
GetFinalCoefLogistic.B2 = function(params, data) {
if (params$trace) cat(as.character(Sys.time()), "GetFinalCoefLogistic.B2\n\n")
betasB = params$betasB / params$sdB
offsetB = sum(betasB * params$meansB)
BFinalFitted = t(params$sdB * t(data$X) + params$meansB) %*% betasB
writeTime = proc.time()[3]
save(betasB, BFinalFitted, offsetB, file = file.path(params$writePath, "b_final.rdata"))
writeSize = sum(file.size(file.path(params$writePath, "b_final.rdata")))
writeTime = proc.time()[3] - writeTime
params = AddToLog(params, "GetFinalCoefLogistic.B2", 0, 0, writeTime, writeSize)
return(params)
}
ComputeResultsLogistic.A2 = function(params, data) {
if (params$trace) cat(as.character(Sys.time()), "ComputeResultsLogistic.A2\n\n")
stats = params$stats
stats$failed         = FALSE
stats$converged      = params$converged
n      = params$n
p1     = params$p1
p2     = params$p2
sdA    = params$sdA
sdB    = params$sdB
meansA = params$meansA
meansB = params$meansB
Anames = params$Acolnames.old
Bnames = params$Bcolnames.old
p1.old = params$p1.old
p2.old = params$p2.old
p.old  = params$p.old
indicies = params$IndiciesKeep
betasB = NULL;
offsetB = NULL;
BFinalFitted = NULL;
readTime = proc.time()[3]
load(file.path(params$readPath, "b_final.rdata"))  # betasB, offsetB, BFinalFitted
readSize = sum(file.size(file.path(params$readPath, "b_final.rdata")))
readTime = proc.time()[3] - readTime
betasA = params$betasA / sdA
offsetA = sum(betasA[-1] * params$meansA[-1])
betasA[1] = betasA[1] - offsetA - offsetB
betas = c(betasA, betasB)
AFinalFitted = t(sdA * t(data$X) + meansA) %*% betasA -
t(sdA[1] * t(data$X[, 1]) + meansA[1]) %*% betasA[1]
FinalFitted = AFinalFitted + BFinalFitted + betas[1]
params$FinalFitted = FinalFitted
n = params$n
ct      = sum(data$Y)
resdev  = -2 * (sum(data$Y * FinalFitted) - sum(log(1 + exp(FinalFitted))))
nulldev = -2 * (ct * log(ct / n) + (n - ct) * log(1 - ct / n))
# If xtwx were singular, it would have been caught in GetII.A2(), so we may
# assume that xtwx is NOT singular and so we do not have to do a check.
cov1 = solve(params$xtwx)
secoef = sqrt(diag(cov1)) / c(sdA, sdB)
tmp = matrix(c(1, (-meansA / sdA)[-1], -meansB / sdB), ncol = 1)
secoef[1] = sqrt(t(tmp) %*% cov1 %*% tmp)
stats$party = c(rep("dp0", p1.old), rep("dp1", p2.old))
stats$coefficients = rep(NA, p.old)
stats$secoef = rep(NA, p.old)
stats$tvals  = rep(NA, p.old)
stats$pvals  = rep(NA, p.old)
stats$n  = n
stats$nulldev = nulldev
stats$resdev = resdev
stats$aic = resdev + 2 * (p1 + p2)
stats$bic = resdev + (p1 + p2) * log(n)
stats$nulldev_df = n - 1
stats$resdev_df = n - (p1 + p2)
stats$coefficients[indicies] = betas
stats$secoef[indicies] = secoef
tvals = betas / secoef
pvals = 2 * pnorm(abs(tvals), lower.tail = FALSE)
stats$tvals[indicies] = tvals
stats$pvals[indicies] = pvals
stats$nulldev = nulldev
stats$resdev  = resdev
stats$hoslem  = HoslemInternal(params, data)
stats$ROC     = RocInternal(params, data)
stats$iter    = params$algIterationCounter - 1
names.old = c(Anames, Bnames)
names(stats$coefficients) = names.old
names(stats$party) = names.old
names(stats$secoef) = names.old
names(stats$tvals) = names.old
names(stats$pvals) = names.old
writeTime = proc.time()[3]
save(stats, file = file.path(params$writePath, "stats.rdata"))
writeSize = file.size(file.path(params$writePath, "stats.rdata"))
writeTime = proc.time()[3] - writeTime
stats$Y           = data$Y # For Hoslem and ROC
stats$FinalFitted = FinalFitted
params$stats      = stats
params = AddToLog(params, "ComputeResultsLogistic.B2", readTime, readSize, writeTime, writeSize)
return(params)
}
GetResultsLogistic.B2 = function(params) {
if (params$trace) cat(as.character(Sys.time()), "GetResultsLogistic.B2\n\n")
readTime = proc.time()[3]
load(file.path(params$readPath, "stats.rdata"))
readSize = file.size(file.path(params$readPath, "stats.rdata"))
readTime = proc.time()[3] - readTime
params$stats = stats
params = AddToLog(params, "GetResultsLogistic.B2", readTime, readSize, 0, 0)
return(params)
}
load("D:/Dropbox/Tom/PSU/Distributed Regression/R_code/vdra/data/vdra_data.rdata")
vdra_data
head(vdra_data)
load("D:/Dropbox/Tom/PSU/Distributed Regression/R_code/vdra/data/vdra_return_types.rdata")
vdra_fit_cox_A
vdra_fit_cov_B
vdra_fit_cox_B
vdra_fit_linear_A
vdra_fit_linear_B
vdra_fit_logistic_A
vdra_fit_logistic_B
setwd("D:/Dropbox/Tom/PSU/STAT 380 - Data Science/Kaggle/March Madness/midterm/Medha")
datadir = "."
set.seed(314)
test <- fread(file.path(datadir, "example_sub.csv"))
library(caret)
library(data.table)
library(Metrics)
setwd("D:/Dropbox/Tom/PSU/STAT 380 - Data Science/Kaggle/March Madness/midterm/Medha")
datadir = "."
set.seed(314)
test <- fread(file.path(datadir, "example_sub.csv"))
season <- fread(file.path(datadir, "season.csv"))
tourney <- fread(file.path(datadir, "tourney.csv"))
ordinals <- fread(file.path(datadir, "massey.csv"))
test
strsplit(test$id, "_")
unlist(strsplit(test$id, "_"))
test <- data.table(matrix(unlist(strsplit(test$id, "_")), ncol = 4, byrow = TRUE))
test
setnames(test, c("V1", "V2", "V3", "V4"), c("Season", "DayNum", "team_1", "team_2"))
test
test$result <- 0.5
train <- rbind(season, tourney)
train
train <- train[,.(WTeamID, LTeamID, Season, DayNum)]
setnames(train,c("WTeamID","LTeamID"),c("team_1","team_2"))
train
train$result <- 1
train
master <- rbind(train,test, fill = TRUE)
master
master$team_1 <- as.character(master$team_1)
master$team_2 <- as.character(master$team_2)
ordinals
ordinals$DayNum <- ordinals$RankingDayNum + 1
ordinals
pom_ordinals <- ordinals[SystemName == "POM", .(Season, DayNum, TeamID, OrdinalRank)]
pom_ordinals
setnames(pom_ordinals, "TeamID", "team_1")
pom_ordinals
pom_ordinals$team_1 <- as.character(pom_ordinals$team_1)
setkey(master, Season,team_1, DayNum)
setkey(pom_ordinals, Season, team_1, DayNum)
master
pom_ordinals
master$Season <- as.numeric(master$Season)
ordinals$Season <- as.numeric(ordinals$Season)
master <- pom_ordinals[master, roll = T]
pom_ordinals
class(pom_ordinals$Season)
class(master$Season)
class(pom_ordinals$team_1)
class(master$team_1)
class(pom_ordinals$DayNum)
class(master$DayNum)
master$Season <- as.numeric(master$Season)
ordinals$Season <- as.numeric(ordinals$Season)
setkey(master, Season,team_1, DayNum)
setkey(pom_ordinals, Season, team_1, DayNum)
pom_ordinals
class(pom_ordinals$Season)
class(master$Season)
master$Season <- as.numeric(master$Season)
pom_ordinals$Season <- as.numeric(pom_ordinals$Season)
setkey(master, Season,team_1, DayNum)
setkey(pom_ordinals, Season, team_1, DayNum)
class(pom_ordinals$Season)
class(master$Season)
class(pom_ordinals$team_1)
class(master$team_1)
class(pom_ordinals$DayNum)
class(master$DayNum)
master$DayNum <- as.numeric(master$DayNum)
pom_ordinals$DayNum <- as.numeric(pom_ordinals$DayNum)
setkey(master, Season,team_1, DayNum)
setkey(pom_ordinals, Season, team_1, DayNum)
class(pom_ordinals$Season)
class(master$Season)
class(pom_ordinals$team_1)
class(master$team_1)
class(pom_ordinals$DayNum)
class(master$DayNum)
master <- pom_ordinals[master, roll = T]
master
rm(list = ls())
library(caret)
library(data.table)
library(Metrics)
rm(list = ls())
setwd("D:/Dropbox/Tom/PSU/STAT 380 - Data Science/Kaggle/March Madness/midterm/Medha")
datadir = "."
set.seed(314)
test <- fread(file.path(datadir, "example_sub.csv"))
season <- fread(file.path(datadir, "season.csv"))
tourney <- fread(file.path(datadir, "tourney.csv"))
ordinals <- fread(file.path(datadir, "massey.csv"))
# Clean test
test
strsplit(test$id, "_")
unlist(strsplit(test$id, "_"))
test <- data.table(matrix(unlist(strsplit(test$id, "_")), ncol = 4, byrow = TRUE))
test
setnames(test, c("V1", "V2", "V3", "V4"), c("Season", "DayNum", "team_1", "team_2"))
test
test$result <- 0.5
# make train
train <- rbind(season, tourney)
train
train <- train[,.(WTeamID, LTeamID, Season, DayNum)]
setnames(train,c("WTeamID","LTeamID"),c("team_1","team_2"))
train
train$result <- 1
train
# make the master data file
train
test
train = train[ , .(Season, DayNum, team_1, team_2, result)]
train
test
master <- rbind(train,test)
master
master
master$team_1 <- as.character(master$team_1)
master$team_2 <- as.character(master$team_2)
ordinals
ordinals$DayNum <- ordinals$RankingDayNum + 1
ordinals
pom_ordinals <- ordinals[SystemName == "POM", .(Season, DayNum, TeamID, OrdinalRank)]
pom_ordinals
setnames(pom_ordinals, "TeamID", "team_1")
pom_ordinals
pom_ordinals$team_1 <- as.character(pom_ordinals$team_1)
master
pom_ordinals
master$Season <- as.numeric(master$Season)
pom_ordinals$Season <- as.numeric(pom_ordinals$Season)
master$DayNum <- as.numeric(master$DayNum)
pom_ordinals$DayNum <- as.numeric(pom_ordinals$DayNum)
setkey(master, Season,team_1, DayNum)
setkey(pom_ordinals, Season, team_1, DayNum)
class(pom_ordinals$Season)
class(master$Season)
class(pom_ordinals$team_1)
class(master$team_1)
class(pom_ordinals$DayNum)
class(master$DayNum)
master <- pom_ordinals[master, roll = T]
master
master[is.na(OrdinalRank)]
na.omit(master)
master = na.omit(master)
master[, .N, result]
setnames(master,"OrdinalRank", "team_1_POM")
setnames(pom_ordinals,"team_1","team_2")
setkey(master,Season,team_2,DayNum)
setkey(pom_ordinals,Season,team_2,DayNum)
master <- pom_ordinals[master,roll = T]
setnames(master,"OrdinalRank","team_2_POM")
master
master[, POM_dif := team_2_POM - team_1_POM]
master
setnames(master,"OrdinalRank","team_2_POM")
master
master[, POM_dif := team_2_POM - team_1_POM]
master
master <- master[order(Season, DayNum)]
master <- master[,.(Season, DayNum, team_1,team_2, POM_dif, result)]
master <- master[!is.na(master$POM_dif)]
test <- master[result == 0.5]
train <- master[result == 1]
train_a = train
train_b = train
train_b$result <- 0
train_b$POM_dif <- -1 * train_b$POM_dif
train_a
train_b
test
train <- rbind(train_a, train_b)
train
test
fwrite(test, file.path(datadir, "test.csv"))
fwrite(train, file.path(datadir, "train.csv"))
test = fread(file.path(datadir, "test.csv"))
train = fread(file.path(datadir, "train.csv"))
train_y <- train$result
library(caret)
library(data.table)
library(Metrics)
rm(list = ls())
setwd("D:/Dropbox/Tom/PSU/STAT 380 - Data Science/Kaggle/March Madness/midterm/Medha")
datadir = "."
set.seed(314)
test <- fread(file.path(datadir, "example_sub.csv"))
season <- fread(file.path(datadir, "season.csv"))
tourney <- fread(file.path(datadir, "tourney.csv"))
ordinals <- fread(file.path(datadir, "massey.csv"))
# Clean test
test
strsplit(test$id, "_")
unlist(strsplit(test$id, "_"))
test <- data.table(matrix(unlist(strsplit(test$id, "_")), ncol = 4, byrow = TRUE))
test
setnames(test, c("V1", "V2", "V3", "V4"), c("Season", "DayNum", "team_1", "team_2"))
test
test$result <- 0.5
# make train
train <- rbind(season, tourney)
train
train <- train[,.(WTeamID, LTeamID, Season, DayNum)]
setnames(train,c("WTeamID","LTeamID"),c("team_1","team_2"))
train
train$result <- 1
train
# make the master data file
train
test
train = train[ , .(Season, DayNum, team_1, team_2, result)]
train
test
master <- rbind(train,test)
master
master
master$team_1 <- as.character(master$team_1)
master$team_2 <- as.character(master$team_2)
ordinals
ordinals$DayNum <- ordinals$RankingDayNum + 1
ordinals
pom_ordinals <- ordinals[SystemName == "POM", .(Season, DayNum, TeamID, OrdinalRank)]
pom_ordinals
setnames(pom_ordinals, "TeamID", "team_1")
pom_ordinals
pom_ordinals$team_1 <- as.character(pom_ordinals$team_1)
master
pom_ordinals
master$Season <- as.numeric(master$Season)
pom_ordinals$Season <- as.numeric(pom_ordinals$Season)
master$DayNum <- as.numeric(master$DayNum)
pom_ordinals$DayNum <- as.numeric(pom_ordinals$DayNum)
setkey(master, Season,team_1, DayNum)
setkey(pom_ordinals, Season, team_1, DayNum)
class(pom_ordinals$Season)
class(master$Season)
class(pom_ordinals$team_1)
class(master$team_1)
class(pom_ordinals$DayNum)
class(master$DayNum)
master <- pom_ordinals[master, roll = T]
master
master = na.omit(master)
setnames(master,"OrdinalRank", "team_1_POM")
setnames(pom_ordinals,"team_1","team_2")
setkey(master,Season,team_2,DayNum)
setkey(pom_ordinals,Season,team_2,DayNum)
master <- pom_ordinals[master,roll = T]
setnames(master,"OrdinalRank","team_2_POM")
master
master[, POM_dif := team_2_POM - team_1_POM]
master
master <- master[order(Season, DayNum)]
master <- master[,.(Season, DayNum, team_1,team_2, POM_dif, result)]
master <- master[!is.na(master$POM_dif)]
test <- master[result == 0.5]
train <- master[result == 1]
train_a = train
train_b = train
train_b$result <- 0
train_b$POM_dif <- -1 * train_b$POM_dif
train <- rbind(train_a, train_b)
train
test
fwrite(test, file.path(datadir, "test.csv"))
fwrite(train, file.path(datadir, "train.csv"))
test = fread(file.path(datadir, "test.csv"))
train = fread(file.path(datadir, "train.csv"))
train_y <- train$result
train$team_1 <- NULL
train$team_2 <- NULL
test$team_1 <- NULL
test$team_2 <- NULL
#fit a linear model
train
glm_model <- glm(result ~ POM_dif, family = binomial, data = train)
pred <- predict(glm_model, newdata = test, type = "response")
pred
detach("package:vdra", unload=TRUE)
library(vdra)
library(vdra)
library(vdra)
head(vdra_data)
summary(vdra_fit_cox_A)
summary(vdra_fit_cox_B)
summary(vdra_fit_linear_A)
summary(vdra_fit_linear_B)
summary(vdra_fit_logistic_A)
summary(vdra_fit_logistic_B)
summary(vdra_fit_cox_B)
getwd(
getwd()
library(vdra)
summary(vdra_fit_cox_A)
summary(vdra_fit_cox_B)
summary(vdra_fit_linear_A)
summary(vdra_fit_linear_B)
summary(vdra_fit_logistic_A)
summary(vdra_fit_logistic_B)
library(vdra)
?dir.exists
library(vdra)
library(vdra)
